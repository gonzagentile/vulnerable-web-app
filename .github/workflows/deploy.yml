name: SAST, DAST, Build and Deploy Vulnerable Application                                  # workflow name

on:
  push:
    branches:
      - master
      
jobs:

  gitleaks:
    name: Scan secrets GitLeaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks
          path: gitleaks.json 

  semgrep-full:
      runs-on: ubuntu-latest
      container:
        image: returntocorp/semgrep

      steps:

        # step 1
        - name: clone application source code
          uses: actions/checkout@v3

        # step 2
        - name: full scan
          run: |
            semgrep \
              --sarif --output report.sarif \
              --metrics=off \
              --config="p/default"

        # step 3
        - name: save report as pipeline artifact
          uses: actions/upload-artifact@v3
          with:
            name: report.sarif
            path: report.sarif

        # step 4
        - name: publish code scanning alerts
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: report.sarif
            category: semgrep
  
#  semgrep:
#    name: semgrep scan
#    runs-on: ubuntu-latest
#    permissions:
#      # required for all workflows
#      security-events: write
#      actions: read
#      contents: read
#    container:
#      image: returntocorp/semgrep:latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#      - name: Run semgrep security scanner
#        continue-on-error: true
#        run: |
#          cat << 'EOF' | bash
#              semgrep ci --config=auto --sarif --output=semgrep.sarif --max-target-bytes=2MB
#              EXIT_CODE=$?
#              if [ "$EXIT_CODE" = "0" ] || [ "$EXIT_CODE" = "1" ]
#              then
#                exit 0
#              else
#                exit $EXIT_CODE
#              fi
#          EOF
#      - name: Upload SARIF file for GitHub Advanced Security Dashboard
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: semgrep.sarif
  
#  semgrep-sast:
#    name: SAST Semgrep
#    runs-on: ubuntu-latest
#    permissions:
#      # required for all workflows
#      security-events: write
#      actions: read
#      contents: read
#    container: returntocorp/semgrep
#    steps:
#      - uses: actions/checkout@v3
#      - run: semgrep ci --sarif --output=semgrep.sarif || true
#        env:
#          SEMGREP_RULES: p/default
#      - name: Upload Semgrep scan results to GitHub Security tab
#        uses: github/codeql-action/upload-sarif@v2
#        with:
#          sarif_file: 'semgrep.sarif'
          
  snyk-code-SCA:
    name: Snyk Code
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=high
            --all-projects
            --sarif-file-output=snyk-code.sarif
      - name: Upload SARIF file
        #if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif 
          
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
          name: code-coverage-report
          path: bin
  
  npmaudit:
    name: npm audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '16'
    - run: npm audit --registry=https://registry.npmjs.org  --json > report_npmaudit.json
      continue-on-error: true   
    - uses: actions/upload-artifact@v3
      with:
        name: npm audit
        path: report_npmaudit.json 
            
 # secrets:
 #   name: Scan Secret HORUSEC
 #   runs-on: ubuntu-latest
 #   steps:
 #   - name: Checkout code
 #     uses: actions/checkout@v3
 #   - name: Install Horusec
 #     continue-on-error: true
 #     run: |
 #       curl -fsSL https://raw.githubusercontent.com/ZupIT/horusec/master/deployments/scripts/install.sh | bash -s latest
 #       horusec start -p="./" -e="true" -o="json" -O="./horusec.json" 
 #   - uses: actions/upload-artifact@v3
 #     with:
 #       name: horusec
 #       path: horusec.json  
      
 # linter:
 #   name: linter dockerfile
#  runs-on: ubuntu-latest
#    steps:
#    - name: Checkout code
#      uses: actions/checkout@v3 
#    - name: Install hadolint
#      continue-on-error: true
#      run: docker run --rm -i hadolint/hadolint < Dockerfile
#   - name: Upload artifact
#      uses: actions/upload-artifact@v3
#      with:
#        name: hadolint
#       path: hadolint.json  
   
#  synk:
#    name: Snyk
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node-version: [12.x]
#    steps:
#        - uses: actions/checkout@master
#        - name: User Node.js ${{ matrix.node-version }}
#          uses: snyk/actions/setup-node@v1
#          with:
#            node-version: ${{ matrix.node-version }}
#        - name: Installing snyk-delta and dependecies
#          run: npm i -g snyk-delta
#        - uses: actions/actions/setup@master
#        - name: snyk test
#          run: snyk test --json --print-deps | snyk-delta
#          env:
#           SYNK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  trivy:
    name: Scan image Trivy
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
#security github
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json
          
      

    #  - name: Upload Trivy scan results to GitHub Security tab
    #   uses: github/codeql-action/upload-sarif@v2
    #    with:
    #      sarif_file: 'trivy-results.html'
      
      #- name: Run Trivy vulnerability scanner
      #  uses: aquasecurity/trivy-action@master
      #  continue-on-error: true
      #  with:
      #    image-ref: 'trivy-image:${{ github.sha }}'
      #    format: 'json'
      #    output: 'trivy-results.json'
      #    severity: 'HIGH'
      #    exit-code: '1'
      #- uses: actions/upload-artifact@v3
      #  with:
      #    name: trivy
      #    path: trivy-results.json
          
  deploy-heroku:
    name: Deploy Heroku
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "gentile-gonzalo" #Must be unique in Heroku
          heroku_email: "gonza.gentile@gmail.com"
          branch: "master"
          usedocker: true

#  zap_scan:
#      runs-on: ubuntu-latest
#      needs: deploy-heroku
#      name: Run DAST scan on the web application
#      permissions:
      # required for all workflows
#        security-events: write
#        actions: read
#        contents: read
#      steps:
#        - name: Checkout
#          uses: actions/checkout@v2
#          with:
#            ref: master
#        - name: ZAP Scan
#          uses: zaproxy/action-baseline@v0.6.1
#          with:
#            docker_name: 'owasp/zap2docker-stable'
#            target: 'https://gentile-gonzalo-8a21783a08a4.herokuapp.com/'
#            rules_file_name: '.zap/rules.tsv'
#            cmd_options: '-a'
#        - uses: actions/upload-artifact@v3
#          with:
#            name: owasp-report
#            path: testreport.* 
            
#  owasp:
#    name: Scan dast owasp
#    runs-on: ubuntu-latest
#    needs: deploy-heroku
#    steps:
#    - uses: actions/checkout@v3
#    - name: Run Api Scan 
#      run: |
#        docker run --rm -v $(pwd):/zap/wrk/:rw --user root -t owasp/zap2docker-weekly zap-full-scan.py -t https://gentile-gonzalo-8a21783a08a4.herokuapp.com/ -d -I -x testreport.xml -r testreport.html
#    - uses: actions/upload-artifact@v3
#      with:
#        name: owasp
#        path: testreport.*  
  zap_scan:
      runs-on: ubuntu-latest
      #needs: security
      needs: deploy-heroku
      name: Run DAST scan on the web application
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            ref: master
        - name: ZAP Scan
          uses: zaproxy/action-full-scan@v0.5.1
          with:
            docker_name: 'owasp/zap2docker-stable'
            target: 'https://gentile-gonzalo-d861fc7e5294.herokuapp.com/'
            rules_file_name: '.zap/rules.tsv'
            cmd_options: '-a'
            artifact_name: 'zap-dast'
            allow_issue_writing: false
        - name: ZAP Report
          uses: actions/upload-artifact@v3
          with:
            name: zap-dast
            path: zap-dast
      
