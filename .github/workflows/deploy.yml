name: Secret Detection, SAST, SCA, DAST, Build and Deploy Vulnerable Application                                  # workflow name

on:
  push:
    branches:
      - master
      
jobs:
  Secret_Detection_TruffleHog:
    name: Scan secrets Trufflehog
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: TruffleHog OSS Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json
      - name: Upload Trufflehog artifact
        uses: actions/upload-artifact@v3
        with:
          name: trufflehog
          path: "*.json"
          
  Secret_Detection_Gitleaks:
    name: Scan secrets GitLeaks
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload GitLeaks artifact
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks
          path: gitleaks.json 

  SAST_Semgrep:
    name: SAST Semgrep
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    container: returntocorp/semgrep
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run Semgrep with Sarif
        run: semgrep ci --sarif --output=semgrep.sarif || true
        env:
            SEMGREP_RULES: p/default
      - name: Run Semgrep with Json
        run: semgrep ci --json --output=semgrep.json || true
        env:
          SEMGREP_RULES: p/default
      - name: Semgrep Report
        uses: actions/upload-artifact@v3
        with:
          name: semgrep.json
          path: semgrep.json
        
  SAST_Sonarcloud:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload SonarCloud artifact
      uses: actions/upload-artifact@v3
      with:
          name: code-coverage-report
          path: bin
  
  SCA_npmaudit:
    name: npm audit
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup nodev16
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    - name: Run npmaudit
      run: npm audit --registry=https://registry.npmjs.org  --json > report_npmaudit.json
      continue-on-error: true   
    - name: Upload npmaudit artifact
      uses: actions/upload-artifact@v3
      with:
        name: npm audit
        path: report_npmaudit.json 
               
  Container_Scan_trivy:
    name: Scan image Trivy
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json
          
  Deploy_heroku:
    name: Deploy Heroku
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v2
      - name: Run Heroku Deploy
        uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: "gentile-gonzalo" #Must be unique in Heroku
          heroku_email: "gonza.gentile@gmail.com"
          branch: "master"
          usedocker: true
         
  DAST_OWASPZAP:
      runs-on: ubuntu-latest
      needs: deploy-heroku
      name: Run DAST scan on the web application
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
          with:
            ref: master
        - name: Run ZAP Scan with zap2docker-stable full-scan
          uses: zaproxy/action-full-scan@v0.5.1
          with:
            docker_name: 'owasp/zap2docker-stable'
            target: 'https://gentile-gonzalo-194064ed3b32.herokuapp.com/'
            rules_file_name: '.zap/rules.tsv'
            cmd_options: '-a'
            artifact_name: 'zap-dast'
            allow_issue_writing: false
        - name: Upload ZAP artifact
          uses: actions/upload-artifact@v3
          with:
            name: zap-dast
            path: zap-dast
      
