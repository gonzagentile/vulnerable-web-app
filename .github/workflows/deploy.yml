name: SAST, DAST, Build and Deploy Vulnerable Application                                  # workflow name

on:
  push:
    branches:
      - master
      
jobs:

  TruffleHog:
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified --json
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: trufflehog
          path: ./*.json

  gitleaks:
    name: Scan secrets GitLeaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: gitleaks
          path: gitleaks.json 

  semgrep-sast:
    name: SAST Semgrep
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    container: returntocorp/semgrep
    steps:
      - uses: actions/checkout@v3
      - run: semgrep ci --sarif --output=semgrep.sarif || true
        env:
            SEMGREP_RULES: p/default
      - run: semgrep ci --json --output=semgrep.json || true
        env:
          SEMGREP_RULES: p/default
      - name: Upload Semgrep scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'semgrep.sarif'
      - name: Semgrep Report
        uses: actions/upload-artifact@v3
        with:
          name: semgrep.json
          path: semgrep.json
    
  snyk-code:
    name: Snyk Code
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: >
            --severity-threshold=low
            --all-projects
            --sarif-file-output=snyk-code.sarif
      - name: Upload SARIF file
        #if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk-code.sarif
          
  sonarcloud:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
          name: code-coverage-report
          path: bin
  
  npmaudit:
    name: npm audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '16'
    - run: npm audit --registry=https://registry.npmjs.org  --json > report_npmaudit.json
      continue-on-error: true   
    - uses: actions/upload-artifact@v3
      with:
        name: npm audit
        path: report_npmaudit.json 
               
  trivy:
    name: Scan image Trivy
    runs-on: ubuntu-latest
    permissions:
      # required for all workflows
      security-events: write
      actions: read
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an image from Dockerfile
        run: |
          docker build -t trivy-image:${{ github.sha }} .
#security github
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'trivy-image:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: actions/upload-artifact@v3
        with:
          name: trivy
          path: trivy-results.json
          
#  deploy-heroku:
#    name: Deploy Heroku
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#      - uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
#        with:
#          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
#          heroku_app_name: "gentile-gonzalo" #Must be unique in Heroku
#          heroku_email: "gonza.gentile@gmail.com"
#          branch: "master"
#          usedocker: true
         
#  zap_scan:
#      runs-on: ubuntu-latest
      #needs: security
#      needs: deploy-heroku
#      name: Run DAST scan on the web application
#      steps:
#        - name: Checkout
#          uses: actions/checkout@v3
#          with:
#            ref: master
#        - name: ZAP Scan
#          uses: zaproxy/action-full-scan@v0.5.1
#          with:
#            docker_name: 'owasp/zap2docker-stable'
#            target: 'https://gentile-gonzalo-194064ed3b32.herokuapp.com/'
#            rules_file_name: '.zap/rules.tsv'
#            cmd_options: '-a'
#            artifact_name: 'zap-dast'
#            allow_issue_writing: false
#        - name: ZAP Report
#          uses: actions/upload-artifact@v3
#          with:
#            name: zap-dast
#            path: zap-dast
      
